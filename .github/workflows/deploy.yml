name: CICD Pipeline

on:
  push:
    branches:
      - master

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Google Cloud SDK to authenticate Docker with GCR or Artifact Registry
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}  # Set this secret in GitHub repo
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}  # Set this secret in GitHub repo
          export_default_credentials: true

      # Step 3: Authenticate Docker to push images to GCR
      - name: Authenticate Docker to GCR
        run: |
          gcloud auth configure-docker

      # Step 4: Fetch Service Account Key from Vault
      - name: Fetch Service Account Key from Vault
        env:
          VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}  # Use the Vault token stored in GitHub secrets
        run: |
          export SERVICE_ACCOUNT_KEY=$(vault kv get -field=key secret/service-account)
          echo $SERVICE_ACCOUNT_KEY > /tmp/service-account-key.json
          echo "Service account key fetched and stored."
          echo "GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}"  # Log the GCP_SERVICE_ACCOUNT_KEY for debugging

      # Step 5: Build the Docker image
      - name: Build Docker image
        run: |
          PROJECT_ID=${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          if [ -z "$PROJECT_ID" ]; then
            echo "GCP_SERVICE_ACCOUNT_KEY is not set. Please check your GitHub secrets."
            exit 1
          fi
          docker build -t gcr.io/$PROJECT_ID/my-python-app:${{ github.sha }} .

      # Step 6: Push the Docker image to GCR
      - name: Push Docker image
        run: |
          docker push gcr.io/${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}/my-python-app:${{ github.sha }}

      # Step 7: Optional - clean up local Docker images
      - name: Clean up Docker
        run: |
          docker rmi gcr.io/${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}/my-python-app:${{ github.sha }} || true

      # Step 8: Notify ArgoCD to sync the application after the Docker image is pushed
      - name: Trigger ArgoCD sync
        run: |
          argocd app sync my-python-app --grpc-web --server ${{ secrets.ARGOCD_SERVER }} --auth-token ${{ secrets.ARGOCD_AUTH_TOKEN }}
